def hat_tage(monat:int, sj=False)->int:
    match monat:
        case 1 | 3 | 5 | 7 | 8 | 10 | 12:
            return 31
        case 4|6|9|11:
            return 30
        case 2:
            if sj==False:
                return 28
            else:
                return 29

geburtstage = [
    [3, 2, 1980], [8, 8, 2003], [2, 4, 2001], [26, 5, 1983], [26, 1, 1995], [21, 2, 2019], [17, 3, 2004],
    [22, 11, 2002], [18, 12, 2013], [18, 2, 2020], [3, 12, 2014], [2, 1, 2021], [28, 1, 1990], [8, 8, 1987],
    [29, 3, 2005], [23, 3, 2021], [14, 4, 1981], [16, 6, 2020], [5, 10, 2011], [20, 11, 2007], [22, 11, 2001],
    [14, 2, 2002], [22, 4, 1993], [18, 8, 1989], [12, 5, 2019], [20, 12, 2020], [27, 11, 1982], [16, 10, 1986],
    [11, 2, 2015], [20, 9, 2009], [25, 2, 2017], [28, 1, 1997], [13, 2, 2015], [4, 6, 2008], [26, 12, 2013],
    [25, 11, 2016], [20, 1, 2008], [10, 7, 1995], [19, 5, 2015], [28, 2, 1994], [15, 9, 2011], [4, 4, 1989],
    [22, 8, 2015], [16, 6, 2006], [1, 8, 2000], [16, 3, 1985], [22, 12, 2001], [24, 8, 2001], [7, 1, 1999],
    [3, 7, 2006], [2, 7, 1986], [8, 5, 2019], [16, 7, 1992], [28, 11, 1995], [8, 8, 1983], [6, 10, 2014],
    [24, 8, 1993], [25, 9, 1987], [11, 6, 1984], [11, 4, 2017], [4, 12, 2017], [19, 8, 1985], [31, 1, 2001],
    [2, 11, 2022], [11, 9, 1986], [11, 10, 2012], [4, 12, 1995], [20, 4, 2012], [25, 3, 1992], [7, 8, 2015],
    [5, 7, 1989], [27, 3, 2024], [14, 1, 2024], [23, 8, 1998], [12, 6, 2004], [19, 1, 2011], [28, 2, 1999],
    [26, 10, 1981], [2, 5, 1985], [12, 5, 2011], [5, 11, 2015], [4, 12, 2009], [10, 1, 2009], [16, 10, 2016],
    [12, 7, 2006], [11, 10, 2007], [22, 4, 2016], [11, 12, 1985], [22, 7, 1992], [5, 9, 2007], [19, 5, 2000],
    [15, 11, 2013], [5, 7, 1987], [29, 4, 1998], [31, 8, 2009], [24, 3, 2010], [20, 5, 2013], [2, 12, 2007],
    [18, 3, 2001], [2, 5, 2015], [1, 2, 2006], [18, 3, 1983], [28, 1, 2008], [26, 9, 1981], [19, 7, 1986],
    [6, 3, 1996], [16, 12, 1990], [20, 4, 1990], [22, 11, 1996], [12, 1, 1988], [17, 1, 2022], [9, 3, 2013],
    [15, 11, 2015], [24, 12, 2018], [3, 7, 2004], [16, 7, 1998], [13, 4, 2012], [27, 6, 1986], [8, 8, 2004],
    [5, 1, 1991], [1, 10, 1999], [2, 10, 2010], [7, 3, 2019], [7, 8, 2009], [7, 8, 2007], [13, 2, 2002], [6, 1, 2007],
    [6, 1, 1980], [4, 8, 1987], [10, 8, 1994], [23, 1, 1990], [18, 11, 1985], [1, 6, 2002], [14, 7, 2024], 
    [1, 11, 1991], [28, 6, 1994], [18, 11, 1993], [23, 7, 2007], [19, 12, 2002], [11, 5, 2024], [12, 10, 1992],
    [24, 3, 1988], [1, 3, 1984], [25, 8, 2001], [17, 3, 2013], [24, 11, 1992], [27, 4, 2021], [17, 10, 2003],
    [15, 2, 2003], [10, 5, 1995], [25, 1, 2016], [23, 7, 2007], [31, 6, 1993], [25, 7, 1983], [22, 11, 2020],
    [19, 8, 2004], [27, 12, 2014], [21, 5, 2018], [7, 10, 2010], [5, 4, 1996], [5, 8, 2024], [30, 12, 2007],
    [12, 9, 1995], [24, 4, 1989], [30, 1, 2002], [7, 8, 1993], [22, 10, 2009], [16, 10, 1998], [27, 12, 2010],
    [12, 2, 1994], [18, 8, 2024], [3, 9, 2017], [27, 9, 1995], [16, 6, 2002], [4, 6, 1986], [1, 5, 1980],
    [12, 6, 1984], [1, 3, 2007], [14, 4, 2006], [2, 12, 1986], [29, 4, 2017], [20, 9, 1996], [12, 7, 1999],
    [30, 3, 2002], [26, 3, 1981], [9, 1, 2009], [17, 6, 1984], [31, 12, 2021], [4, 12, 2011], [4, 10, 2023],
    [21, 1, 1997], [18, 6, 2006], [26, 5, 2019], [16, 3, 1985], [16, 8, 2003], [28, 9, 2007], [22, 12, 2008],
    [2, 11, 1982], [3, 11, 1983], [28, 6, 1989], [23, 7, 1981], [19, 1, 2001], [31, 3, 2013], [31, 1, 1981],
    [4, 9, 2003], [17, 10, 2002], [13, 5, 2006], [1, 7, 2024], [18, 3, 1988], [26, 11, 2022], [29, 11, 1991],
    [21, 3, 1990], [2, 12, 1992], [14, 2, 1982], [5, 4, 2009], [18, 8, 1998], [9, 3, 1995], [4, 11, 2018],
    [1, 1, 2014], [17, 6, 1981], [12, 8, 1993], [24, 9, 2004], [10, 8, 2009], [3, 8, 2019], [24, 12, 1984],
    [10, 1, 1999], [42, 8, 2012], [11, 8, 2003], [2, 2, 1984], [15, 2, 2024], [25, 11, 2009], [28, 2, 2023],
    [17, 2, 1984], [17, 6, 1992], [6, 7, 1998], [1, 7, 1992], [25, 3, 2024], [16, 7, 2023], [27, 7, 1987],
    [29, 7, 2021], [4, 9, 2000], [18, 9, 2023], [21, 10, 1996], [2, 4, 1980], [23, 9, 2010], [17, 10, 2016],
    [28, 11, 1986], [22, 10, 1998], [29, 6, 2004], [27, 5, 2023], [13, 4, 1999], [1, 9, 2021], [5, 12, 2000],
    [7, 10, 2000], [20, 1, 1985], [18, 12, 2021], [22, 10, 2019], [4, 7, 2003], [29, 7, 2019], [1, 7, 1987],
    [20, 2, 2010], [30, 3, 2011], [17, 6, 2013], [17, 10, 2005], [26, 11, 2019], [10, 11, 2010], [8, 9, 1989],
    [2, 4, 2006], [20, 5, 1997], [7, 2, 1993], [6, 6, 2001], [11, 3, 1982], [26, 2, 1994], [8, 8, 2014], [12, 7, 2008],
    [4, 5, 1991], [28, 6, 1990], [30, 12, 2007], [26, 11, 2001], [4, 12, 2022], [2, 11, 1982], [25, 12, 1984],
    [4, 9, 2014], [10, 4, 2021], [11, 8, 2023], [2, 12, 1989], [25, 7, 1988], [8, 4, 1985], [8, 11, 1984],
    [11, 7, 2011], [21, 7, 2024], [17, 1, 2008], [19, 5, 1985], [27, 11, 2004], [16, 2, 1989], [27, 12, 2010],
    [13, 1, 1982], [28, 5, 1998], [18, 4, 1997], [10, 3, 2018], [5, 9, 1986], [22, 4, 1980], [26, 1, 2003],
    [20, 6, 1984], [9, 5, 2004], [17, 7, 1995], [7, 9, 2015], [12, 6, 2008], [23, 4, 2020], [23, 1, 1980],
    [22, 3, 2007], [9, 2, 2017], [-3, 1, 2001], [30, 3, 2013], [12, 10, 2019], [1, 8, 1999], [23, 1, 1994],
    [26, 7, 1985], [24, 11, 1990], [23, 7, 2010], [17, 3, 2000], [27, 2, 2015], [14, 9, 1999], [7, 6, 2005],
    [16, 11, 2007], [11, 10, 1981], [29, 11, 2019], [8, 4, 2008], [8, 4, 2022], [7, 2, 1995], [8, 2, 1983],
    [18, 8, 2004], [12, 6, 1997], [23, 10, 2015], [24, 12, 2006], [30, 1, 1984], [2, 2, 2008], [10, 4, 1995],
    [24, 2, 2011], [8, 11, 1988], [26, 8, 1997], [30, 11, 1998], [17, 4, 2023], [9, 2, 2021], [1, 5, 1989],
    [28, 3, 2001], [26, 12, 2008], [7, 10, 2017]
]
#aufgabe 1
#print(len(geburtstage)==345)

#aufgabe 2
#print(geburtstage[142])

#aufgabe 3
"""
r=0
for i in geburtstage:
    if i[1]==3:
        r+=1
print(r)
"""
#aufgabe 4
"""
r=0
for i in geburtstage:
    if i[0]==17:
        r+=1
print(r)
"""
#aufgabe 5
"""
r=0
for i in geburtstage:
    if i[2]==1997:
        r+=1
print(r)
"""
#aufgabe 6
"""
monat=[]
max=0
for i in geburtstage:
    monat.append(i[1])  #alle monatewerden aus der geburtstagsliste in die monatsliste kopiert
for l in monat:
    if monat.count(l)>max:
        max = monat.count(l)
        max_monat=l
print("der",max_monat,". monat kommt",max,"-mal vor.")
"""

#aufgabe 7
"""
schaltjahre=0
for i in geburtstage:
    if i[2]%4==0 and (i[2]%100!=0 or i[2]%400==0):
        schaltjahre+=1
print(schaltjahre)
"""

#aufgabe 8
"""
def zwei_haben_geb(geburtstage):
    tag_monat=[]
    for i in geburtstage:
        print(i[:2])
        tag_monat.append(i[:2])

    for i in tag_monat:
        if tag_monat.count(i)>1:
            return True
    return False
    
print(zwei_haben_geb(geburtstage))
"""

#aufgabe 9
"""
summe=[]
for i in geburtstage:
    summe.append((i[0]+i[1]+i[2]))
max_geb=geburtstage[summe.index(max(summe))]
print(max_geb)
"""

#aufgabe 10
"""
tag=[]
monat=[]
tag2=[]
for i in geburtstage:
    if i[2]==2000:
        tag.append(i[0])
        monat.append(i[1])
for i in range(len(monat)):
    if (monat[i]==min(monat)):
        tag2.append(tag[i])
print("min geb ist", min(tag2),", ",min(monat),", 2000")
"""

#aufgabe 11
"""
nach_mauer=[]
for i in geburtstage:
    if (i[2]>1989):
        nach_mauer.append(i)
    if (i[2]==1989 and i[1]>11):
        nach_mauer.append(i)
    if (i[2]==1989 and i[1]==11 and i[0]>9):
        nach_mauer.append(i)
print(len(nach_mauer))
"""

#aufgabe12
"""
nach_mauer=[]
for i in geburtstage:
    if (i[2]>1989 and i[2]<2000):
        nach_mauer.append(i)
    if (i[2]==1989 and i[1]>11 and i[2]<2000):
        nach_mauer.append(i)
    if (i[2]==1989 and i[1]==11 and i[0]>9 and i[2]<2000):
        nach_mauer.append(i)
print(len(nach_mauer))
"""

#aufgabe 13
"""
for i in geburtstage:
    if (i[0]>31 or i[1]>12):
        print("gefunden")
"""

#aufgabe 14
"""
alt_tage=[]
alt_tage1=[]
alt_monate=[]
jahre=[]
for i in geburtstage:
    jahre.append(i[2])

for i in range(len(geburtstage)):
    if(jahre[i]==min(jahre)):
        alt_monate.append(geburtstage[i][1])
        alt_tage.append(geburtstage[i][0])

for i in range(len(alt_monate)):
    if(alt_monate[i]==min(alt_monate)):
        alt_tage1.append(alt_tage[i])

jung_tage=[]
jung_tage1=[]
jung_monate=[]

for i in range(len(geburtstage)):
    if(jahre[i]==max(jahre)):
        jung_monate.append(geburtstage[i][1])
        jung_tage.append(geburtstage[i][0])

for i in range(len(jung_monate)):
    if(jung_monate[i]==max(jung_monate)):
        jung_tage1.append(jung_tage[i])


print("Ã¤ltester:", min(alt_tage1),",",min(alt_monate),",",min(jahre))
print("jÃ¼ngster:", max(jung_tage1),",",max(jung_monate),",",max(jahre))
"""

#aufgabe 15


"""
for i in geburtstage:
    if ([(i[0]-1),i[1],i[2]] in geburtstage) or ([(i[0]+1),i[1],i[2]] in geburtstage):
        print(i)
    elif i[0]==1 and ([hat_tage(i[1]-1),(i[1]-1),i[2]] in geburtstage):
        print(i)
    elif i[0]==hat_tage(i[1]) and ([1,i[1]+1,i[2]] in geburtstage):
        print(i)
"""

#aufgabe 16
"""
def zu_tage(datum:tuple)->int:
    tage,monate,jahre=datum
    for i in range (1,monate):
        if jahre%4==0 and (jahre%100!=0 or jahre%400==0):   #Jahr 0 ist ein schaltjahr in diesem Fall
            tage+=hat_tage(i,sj=True)
        else:
            tage+=hat_tage(i)
    for i in range (0,jahre):
        if i%4==0 and (i%100!=0 or i%400==0):
            tage+=366
        else:
            tage+=365
    return tage

tage_liste=[]
for i in geburtstage:
    tage_liste.append(zu_tage(i))

for i in range(len(tage_liste)):
    if (tage_liste[i]+100) in tage_liste:
        geb_100=geburtstage[tage_liste.index(tage_liste[i]+100)]
        print(geburtstage[i],":",geb_100)
    elif (tage_liste[i]-100) in tage_liste:
        geb_100=geburtstage[tage_liste.index(tage_liste[i]-100)]
        print(geburtstage[i],":",geb_100)
"""